#BlueJ class context
comment0.target=LinkedList
comment0.text=\n\ A\ generic\ linked\ list\n\ \n\ @author\ Reges\ &\ Stepp\ updated\ by\ Eric\ Boris\n\ @version\ 10/27/18\n
comment1.params=
comment1.target=LinkedList()
comment1.text=\ \n\ create\ a\ list\n
comment10.params=other
comment10.target=void\ addAll(java.util.List)
comment10.text=\n\ append\ a\ list\ onto\ this\ list\n\ \n\ @param\ \ \ other\ \ \ \ \ \ \ the\ list\ to\ add\ to\ this\ list\n
comment11.params=index
comment11.target=void\ remove(int)
comment11.text=\n\ remove\ the\ value\ at\ the\ given\ index\n\ \n\ @param\ \ \ index\ \ \ \ \ \ \ the\ index\ to\ remove\n
comment12.params=index\ value
comment12.target=void\ set(int,\ java.lang.Object)
comment12.text=\n\ replace\ the\ value\ at\ the\ given\ index\ with\ the\ given\ value\n\ \n\ @param\ \ \ index\ \ \ \ \ \ \ the\ position\ to\ replace\n\ @param\ \ \ value\ \ \ \ \ \ \ the\ value\ to\ replace\ at\ index\n
comment13.params=index\ direction
comment13.target=void\ move(int,\ int)
comment13.text=\n\ move\ the\ value\ at\ the\ given\ index\ in\ the\ direction\ and\ amount\ specified\n\ \n\ @param\ \ \ index\ \ \ \ \ \ \ the\ the\ index\ value\ to\ move\n\ @param\ \ \ direction\ \ \ the\ direction\ (+\ or\ -)\ and\ amount\ to\ move\n
comment14.params=
comment14.target=void\ clear()
comment14.text=\n\ clear\ the\ list\n
comment15.params=index
comment15.target=LinkedList.ListNode\ nodeAt(int)
comment15.text=\n\ get\ the\ node\ a\ the\ given\ index\n\ \n\ @param\ \ \ index\ \ \ \ \ \ \ the\ index\ of\ the\ node\ to\ return\n
comment16.params=index
comment16.target=boolean\ checkIndex(int)
comment16.text=\n\ ensure\ provided\ index\ is\ valid\n\ \n\ @param\ \ \ index\ \ \ \ \ \ \ the\ index\ to\ check\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ nothing\ if\ return\ is\ invalid,\ true\ otherwise\n
comment2.params=
comment2.target=int\ size()
comment2.text=\n\ return\ the\ size\ of\ the\ list\n\ \n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ size\ of\ the\ list\n
comment3.params=index
comment3.target=java.lang.Object\ get(int)
comment3.text=\n\ return\ the\ value\ at\ the\ given\ index\ in\ the\ list\n\ \n\ @param\ \ \ index\ \ \ \ \ \ \ the\ index\ of\ the\ list\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ value\ at\ the\ index\n
comment4.params=
comment4.target=java.lang.String\ toString()
comment4.text=\n\ creates\ a\ comma-separated,\ bracked\ version\ of\ the\ list\n\ \n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ a\ string\ version\ of\ the\ list\n
comment5.params=value
comment5.target=int\ indexOf(java.lang.Object)
comment5.text=\n\ return\ the\ position\ of\ the\ first\ occurrence\ of\ the\ given\ value\n\ \n\ @param\ \ \ value\ \ \ \ \ \ \ the\ value\ to\ look\ for\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ first\ position\ of\ the\ value\n
comment6.params=
comment6.target=boolean\ isEmpty()
comment6.text=\n\ returns\ if\ the\ list\ is\ empty\ or\ not\n\ \n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ true\ if\ list\ is\ empty,\ false\ otherwise\n
comment7.params=value
comment7.target=boolean\ contains(java.lang.Object)
comment7.text=\n\ returns\ if\ list\ contains\ given\ value\n\ \n\ @param\ \ \ value\ \ \ \ \ \ \ the\ value\ to\ check\ for\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ true\ if\ value\ is\ in\ list,\ false\ otherwise\n
comment8.params=value
comment8.target=void\ add(java.lang.Object)
comment8.text=\n\ append\ the\ given\ value\ to\ the\ end\ of\ the\ list\n\ \n\ @param\ \ \ value\ \ \ \ \ \ \ the\ value\ to\ append\n
comment9.params=index\ value
comment9.target=void\ add(int,\ java.lang.Object)
comment9.text=\n\ add\ a\ new\ value\ at\ the\ given\ index\n\ \n\ @param\ \ \ index\ \ \ \ \ \ \ the\ position\ to\ add\ the\ value\n\ @param\ \ \ value\ \ \ \ \ \ \ the\ value\ to\ add\n
numComments=17
